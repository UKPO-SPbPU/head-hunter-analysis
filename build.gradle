plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'com.headHunterAnalysis'
version = '1.0.0'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}

dependencies {

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.12.0'
    implementation 'org.mongodb:mongodb-driver-sync:4.10.2'
    implementation 'org.mongodb:mongodb-driver-core:4.10.2'
    implementation group: 'org.json', name: 'json', version: '20240303'
    implementation 'co.elastic.clients:elasticsearch-java:8.16.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.0'

    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.34'

}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

springBoot {
    mainClass.set("") // Явно очищает main-класс, чтобы Spring Boot не искал его
}

// Отключение bootJar
tasks.named('bootJar') {
    enabled = false
}

tasks.named('jar') {
    enabled = true
}

// Настройка задач для каждого JAR
task createParserJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    archiveBaseName.set("parser")
    destinationDirectory.set(file("$buildDir/libs"))
    manifest {
        attributes 'Main-Class': 'parser.runners.ParserRunner'
    }
    from sourceSets.main.output
    configurations = [project.configurations.runtimeClasspath]
}

task createMongoLoaderJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    archiveBaseName.set("mongo-loader")
    destinationDirectory.set(file("$buildDir/libs"))
    manifest {
        attributes 'Main-Class': 'collector.runners.DownloadVacanciesRunner'
    }
    from sourceSets.main.output
    configurations = [project.configurations.runtimeClasspath]
}

task createElasticLoaderJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    archiveBaseName.set("elastic-loader")
    destinationDirectory.set(file("$buildDir/libs"))
    manifest {
        attributes 'Main-Class': 'elk.ElasticSearchRunner'
    }
    from sourceSets.main.output
    configurations = [project.configurations.runtimeClasspath]
}

// Добавление всех задач в зависимость от 'build'
build.dependsOn createParserJar, createMongoLoaderJar, createElasticLoaderJar
